# yamllint disable rule:line-length
---
{% raw %}
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}-family.yml"

- name: Include Distribution version specific variables
  include_vars: "{{ ansible_distribution }}.yml"

- name: Include tasks
  include_tasks: "os_specific/{{ ansible_distribution }}.yml"

- name: Include tasks
  include_tasks: "os_specific/{{ ansible_os_family }}-family.yml"
{% endraw %}
- include_tasks: install_repo.yml
  when: not {{ cookiecutter.role_name }}_install_from_source|bool

- include_tasks: set_user_list.yml
  when: >
    {{ cookiecutter.role_name }}_user_config|bool or
    {{ cookiecutter.role_name }}_user_install|bool

############### Prepare source install ###############

- name: Pre-tasks to install from source
  block:
    - name: Getting latest {{ cookiecutter.role_name }} version
      shell: | # noqa 303
        set -o pipefail
        {{'{{'}} {{ cookiecutter.role_name }}_git_version_cmd {{'}}'}}
      args:
        executable: /bin/bash
      register: {{ cookiecutter.role_name }}_git
      changed_when: false

    - name: Checking if {{ cookiecutter.role_name }} is installed
      stat:
        path: "{{'{{'}} {{ cookiecutter.role_name }}_prefix {{'}}'}}/bin/{{'{{'}} {{ cookiecutter.role_name }}_bin_name {{'}}'}}"
      register: {{ cookiecutter.role_name }}_installed

    - name: Getting current {{ cookiecutter.role_name }} version
      shell: |
        set -o pipefail
        {{'{{'}} {{ cookiecutter.role_name }}_git_version_cmd {{'}}'}}
      args:
        executable: /bin/bash
      when: {{ cookiecutter.role_name }}_installed.stat.exists
      register: {{ cookiecutter.role_name }}_local
      changed_when: false

    - name: Set forced version
      set_fact:
        {{ cookiecutter.role_name }}_git_version: "{{'{{'}} {{ cookiecutter.role_name }}_install_version {{'}}'}}"
      when: {{ cookiecutter.role_name }}_force_install | bool

    - name: Set latest {{ cookiecutter.role_name }} version
      set_fact:
        {{ cookiecutter.role_name }}_git_version: "{{'{{'}} {{ cookiecutter.role_name }}_git.stdout {{'}}'}}"
      when: not {{ cookiecutter.role_name }}_force_install

    - name: Set local {{ cookiecutter.role_name }} version
      set_fact:
        {{ cookiecutter.role_name }}_local_version: "{{'{{'}} {{ cookiecutter.role_name }}_local.stdout {{'}}'}}"
      when: {{ cookiecutter.role_name }}_installed.stat.exists
  when: {{ cookiecutter.role_name }}_install_from_source|bool

############### Source Install ###############

- name: Install from source
  block:
    - name: Removing any {{ cookiecutter.role_name }} package
      become: true
      package:
        name: {{ cookiecutter.role_name }}
        state: absent

    - include_tasks: uninstall_source.yml
      when:
        - {{ cookiecutter.role_name }}_installed.stat.exists
        - >
          ({{ cookiecutter.role_name }}_git_version != {{ cookiecutter.role_name }}_local_version) or
          {{ cookiecutter.role_name }}_force_install|bool

    - include_tasks: install_source.yml
      when: {{ cookiecutter.role_name }}_user_install|bool
      loop: "{{'{{'}} {{ cookiecutter.role_name }}_user_list {{'}}'}}"

  when:
    - {{ cookiecutter.role_name }}_install_from_source|bool
    - >
      not {{ cookiecutter.role_name }}_installed.stat.exists or
      {{ cookiecutter.role_name }}_force_install|bool or
      ({{ cookiecutter.role_name }}_git_version != {{ cookiecutter.role_name }}_local_version)

############### Config ###############
